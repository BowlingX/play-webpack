package com.bowlingx.sbt

import sbt.{File, IO}
import spray.json._

case class WebpackEntry(js: Option[String], css: Option[String])

object WebpackEntryProtocol extends DefaultJsonProtocol {
  implicit val entryFormat = jsonFormat2(WebpackEntry)
}
/**
  * Created by david on 16.01.17.
  */
private[sbt] case class ManifestCompiler(jsonFile:Seq[File]) {

  private[this] val files = jsonFile.map(IO.read(_).parseJson)
  def generate(): String = {
    import WebpackEntryProtocol._

    val manifest = files.flatMap(json => json.convertTo[Map[String, Either[WebpackEntry, String]]]).toMap
    val classString = s"""
       |package com.bowlingx.webpack
       |
       |// THIS FILE HAS BEEN AUTO GENERATED by ${this.getClass.toString}
       |
       |object WebpackManifest extends WebpackManifestType {
       |  val entries:Map[String, Either[WebpackEntry, String]] = Map(
       |  ${manifest.map { case (bundle:String, _) =>
            s"""
               |${"\"" + bundle + "\""} -> `$bundle`
             """.stripMargin
          }.mkString(",")}
       |)
       |  ${manifest.map {
            case (bundle:String, Left(entry)) =>
                s"""
                   |
                   |lazy val `$bundle` = Left(WebpackEntry(
                   |${entry.js.map(e => s"Some(${"\"" + e + "\""})").getOrElse("None")},
                   |${entry.css.map(e => s"Some(${"\"" + e + "\""})").getOrElse("None")}
                   |))
                   |
                   |""".stripMargin

            case (bundle:String, Right(entry)) =>
              s"""
                 |lazy val `$bundle` = Right("$entry")
               """.stripMargin
          }.mkString("\n")}
       |}
     """.stripMargin
    classString
  }
}
